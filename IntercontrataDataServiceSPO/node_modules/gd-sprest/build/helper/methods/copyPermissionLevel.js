"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.copyPermissionLevel = void 0;
var lib_1 = require("../../lib");
var sptypes_1 = require("../../sptypes");
/**
 * Copies a permission level to the current or specified web.
 */
exports.copyPermissionLevel = function (props) {
    // Return a promise
    return new Promise(function (resolve, reject) {
        // Ensure the base permissions exist
        if (SP && SP.BasePermissions) {
            // Set the context and get the role definitions
            var ctx_1 = props.WebUrl ? new SP.ClientContext(props.WebUrl) : SP.ClientContext.get_current();
            // Get the base permission
            var basePerm = ctx_1.get_site().get_rootWeb().get_roleDefinitions().getByName(props.BasePermission);
            ctx_1.load(basePerm);
            ctx_1.executeQueryAsync(
            // Success
            function () {
                // Copy the base permissions
                var basePermissions = basePerm.get_basePermissions();
                var permissions = new SP.BasePermissions();
                var removePermissions = props.RemovePermissions || [];
                for (var key in sptypes_1.SPTypes.BasePermissionTypes) {
                    var permission = sptypes_1.SPTypes.BasePermissionTypes[key];
                    // See if the base permission has this
                    if (basePermissions.has(permission) && removePermissions.indexOf(permission) < 0) {
                        // Set the permission
                        permissions.set(permission);
                    }
                }
                // Parse the custom permissions to add
                var newPermissions = props.AddPermissions || [];
                for (var i = 0; i < newPermissions.length; i++) {
                    // Set the flag
                    permissions.set(newPermissions[i]);
                }
                // Create the role definition
                var roleDefInfo = new SP.RoleDefinitionCreationInformation();
                roleDefInfo.set_basePermissions(permissions);
                roleDefInfo.set_description(props.Description);
                roleDefInfo.set_name(props.Name);
                roleDefInfo.set_order(props.Order);
                // Add the role definition
                var roleDef = ctx_1.get_site().get_rootWeb().get_roleDefinitions().add(roleDefInfo);
                ctx_1.load(roleDef);
                // Execute the request
                ctx_1.executeQueryAsync(function () {
                    // Get the role definition
                    lib_1.Site(props.WebUrl).RootWeb().RoleDefinitions().getById(roleDef.get_id()).execute(function (roleDef) {
                        // Resolve the request
                        resolve(roleDef);
                    }, reject);
                }, reject);
            }, 
            // Error
            function () {
                // Reject the request
                reject("Permission not found in site: " + props.WebUrl);
            });
        }
        else {
            // Reject the request
            reject("The 'SP' core library is not available.");
        }
    });
};
